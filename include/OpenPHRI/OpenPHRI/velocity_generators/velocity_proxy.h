/*
 *  Copyright (C) 2017 Benjamin Navarro <contact@bnavarro.info>
 *
 *  This file is part of OpenPHRI <https://gite.lirmm.fr/navarro/OpenPHRI>.
 *
 *  OpenPHRI is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  OpenPHRI is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with OpenPHRI.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * @file velocity_proxy.h
 * @author Benjamin Navarro
 * @brief Definition of the VelocityProxy class
 * @date April 2017
 * @ingroup OpenPHRI
 */

#pragma once

#include <OpenPHRI/velocity_generators/velocity_generator.h>
#include <OpenPHRI/definitions.h>

namespace OpenPHRI {

/** @brief Generates a velocity based on an externally managed one.
 *  @details Can be useful to add a velocity generated by an external library.
 */
class VelocityProxy : public VelocityGenerator {
public:
	/** @brief Construct a velocity proxy given an externally managed velocity
	 *  @param frame The reference frame in which the velocity is expressed
	 */
	VelocityProxy(Vector6dConstPtr velocity, ReferenceFrame frame = ReferenceFrame::TCP);
	~VelocityProxy() = default;

	virtual Vector6d compute() override;

private:
	Vector6dConstPtr external_velocity_;
	ReferenceFrame frame_;
};

using VelocityProxyPtr = std::shared_ptr<VelocityProxy>;
using VelocityProxyConstPtr = std::shared_ptr<const VelocityProxy>;

} // namespace OpenPHRI
